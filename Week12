//1)
#include <string.h>
#include <stdlib.h>
#include <assert.h>

const int TABLESIZE = 5;

typedef struct entry {
    struct entry *next;  // next entry in the linked list
    char *key;
    char *value;         // value associated with the key
} entry_t;

typedef entry_t *dict_t;

static char *strdu(char *s)
{
    char *p = malloc(strlen(s) + 1);  // +1 for '\0'
    if (p != NULL) {
        strcpy(p, s);
    }
    return p;
}

static unsigned hash(char *s)
{
    unsigned int hashvalue;

    for (hashvalue = 0; *s != '\0'; s += 1) {
        hashvalue = *s + 31 * hashvalue;
    }
    return hashvalue % TABLESIZE;
}

static entry_t *search(entry_t *head, char *key)
{
    for (entry_t *entry = head; entry != NULL; entry = entry->next) {
        if (strcmp(key, entry->key) == 0) {
            return entry;  
        }
    }
    return NULL;
}

dict_t *make_dictionary(void)
{
    dict_t *hashtable = malloc(sizeof(entry_t *) * TABLESIZE);
    assert(hashtable != NULL);

    for (int i = 0; i < TABLESIZE; i += 1) {
        hashtable[i] = NULL;
    }
    return hashtable;
}

char *lookup(dict_t *dict, char *key)
{
    unsigned hashvalue = hash(key);
    entry_t *entry = search(dict[hashvalue], key);
    if (entry != NULL) {
        return entry->value;
    }
    return NULL;
}

void put(dict_t *dict, char *key, char *value)
{
    unsigned hashvalue = hash(key);
    entry_t *entry = search(dict[hashvalue], key);
    if (entry == NULL) { 
      
        entry = malloc(sizeof(entry_t));
        assert(entry != NULL);
        entry->key = strdu(key);
        assert(entry->key != NULL);

        entry->next = dict[hashvalue];
        dict[hashvalue] = entry;
    } else {  
        free(entry->value); 
    }

    entry->value = strdup(value);
    assert(entry->value != NULL);
}


int main(void)
{
    dict_t *addresses = make_dictionary();

    put(addresses, "Don", "donald.bailey@carleton.ca");
    put(addresses, "Donald", "donald.bailey@carleton.ca");

    printf("Email for Don is %s\n", lookup(addresses, "Don"));
    /*printf("Email for Donald is %s\n", get(addresses, "Donald"));*/

    /*put(addresses, "Don", "bailey@sce.carleton.ca");*/

    return 0;
}

















//2)
#include <stdio.h>

void swap(int **a, int **b) {
    int *temp = *a; // Store the value of pointer a in temp
    *a = *b;        // Set pointer a to point to what b points to
    *b = temp;      // Set pointer b to point to what temp (original a) points to
}

int main() {
    int x = 10, y = 20;
    int *ptr1 = &x, *ptr2 = &y;

    printf("Before swap: ptr1 = %p, *ptr1 = %d | ptr2 = %p, *ptr2 = %d\n", 
           (void *)ptr1, *ptr1, (void *)ptr2, *ptr2);

    swap(&ptr1, &ptr2);

    printf("After swap: ptr1 = %p, *ptr1 = %d | ptr2 = %p, *ptr2 = %d\n", 
           (void *)ptr1, *ptr1, (void *)ptr2, *ptr2);

    return 0;
}
